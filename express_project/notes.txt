Express used for:
-easy API setup
-less overhead, fewer props to setup - instatiate express app and listen for req on port
-Express is a framework for Node.js
-Server-sided app

client needs to send HTTP req to server.
code on client side makes req to express server side application.
server side application runs logic and will send back a response to client side application.

In package.json - changing type to "modules" - remember to add .mjs to files so you can use ES6 modules and syntax for import/export

query params:
1. can be used on client side to send data across different pages (eg. passing state)
2. send from client side to server side to add additional data to req that usually isn't added to HTTP req body (eg. when using GET request you could filter or sort server response) 
* should not be used to send sensitive data (eg. passwords) - use req body instead

POST req:
data sent from client to server is sent as req.body/payload
server then does things like validation and parsing before applying logic/sending to db/file storage etc.
returns 201 status if req successful and new resource was created.
*need to use middleware to parse JSON data from req.body so express can use data - middleware function should be called/invoked before the req is made


PUT, PATCH req:
used to update existing resources
-PATCH - partial update
-PUT - replace entire resource --> so you need to include all fields in req.body, even parts that aren't being updated since the PUT request is overwriting the resource (or they will be null)

DELETE req:
used to delete resources
-------------------------
MIDDLEWARE - 
const <middleware> = (req, res, next) => {
	HANDLE req, res? logic,
	next() 
	//pass control to next middleware function in req,res cycle
	//next() is optional - if you don't call it, the req,res cycle will end and the client will never get a response
	-you can have as many middleware called in sequential order using next()
}
app.use(<middleware>, <middleware-2>, etc) ---> global
----
add to route for specific routes:

app.get('/users', <middleware-1>,<middleware-2>, etc, (req,res)=> {route logic})
----
middleware is a function that runs between req and res cycle. 
**It MUST be defined - app.use() - before the route handler (or inside the route handler before the route logic/req,res handler logic)
<handling req & res> middleware functions have access to req + res objects and (if) there is the next middleware function in the apps req,res cycle
Middleware functions can be enabled globally (all routes) or used for specific routes/endpoints (pass as argument in that specific route/reused on multiple routes)

*optionally pass an error to next. If you pass anything to the next function, Express will interpret this as an error and will skip all remaining middleware in the stack (except for error-handling middleware).

app.use((req, res, next) => {
  if (someCondition) {
    next(new Error('Something went wrong'));
  } else {
    next();
  }
});
---------------------------
Express Validator middleware: 
https://express-validator.github.io/docs/
*-->This is server-side validation which is MUCH MORE IMP and necessary - compared to client-side validation (which can be bypassed)
--> so always implement server-side validation
use them like middleware in routes before the req,res handler logic
-->functions you can import (destructured) from express-validator = body, header, param, query, cookie,
-->*check (check is the mainAPI used for validating and sanitizing HTTP req and gives you access to all build in validators and sanitizers and utility functions/methods)
*for body() validator if the arg is passed as an array it will check all fields in the body of the req [body('key1').methods, body('key2').methods]
You would then be able to create validation chains by chaining methods to these functions
eg. The query function validator specifically is used to create a validation chain for query parameters, you chain on validation methods depending on how you want to validate the query parameter
app.get('/users', <validator middleware>, (req,res)=> {route logic})

*note: validators do not report/throw validation errors to users/client automatically (it will validate but will not throw an error) - you need to handle the error 

you can create 'unlimited' validation chain to keep calling more methods of validation on the same (eg. query('queryparam'))

you can use if (result.isEmpty()){} to check if there were any validation errors (returns bool)
you can use matchedData(req) to get the data that was validated when passing it to res logic

**Scehma validation:
-obj that has all validators defined so you reduce DRY code in routes
-use checkSchema(schemaObj) inside route
------------------------------------------------
Express Router:
https://expressjs.com/en/guide/routing.html
Use express.Router() class to create router instance (which is a complete middleware and routing system)
same as app.use for middleware and app.METHOD for defining routes
group API endpoints together as a domain - define route for each domain with router.METHOD then app.use('/<routename>', router) for that domain
(mini-app inside express) 1 - register req on router --> 2. register router on express

//good practice is to have folders for each domain routes and then import all into a collective <routes> index folder that you can export to your express app.use(<routes>)

------------------------------------------------
HTTP Cookies: https://en.wikipedia.org/wiki/HTTP_cookie
https://expressjs.com/en/resources/middleware/cookie-parser.html
- small pieces of data web server sends to client web browser
- the browser can store the cookies and send them back to the server in future requests
--> this is relevant since ! HTTP IS STATELESS ! (no memory of previous req) so cookies enable web servers to store stateful info on client device and respond with dynamic contextual data based on client for activities such as tracking activity, logging, saving form fields, password management, personalization, etc
eg. Authentication cookies commonly used by web servers to authenticate that a user is logged in and on which account. Otherwise they would need to authenticate on every req.
eg. Tracking cookies (especially 3rd party tracking cookies) used to compile records of client browsing history.

TYPES - 

1. session/in-memory/transient/non-persistent cookies - expire or deleted when user closes browser; exist only in temporary memory while a user is on a web page. (identified by browser from absencse of expirationn date or max-age attribute assigned to them)

2. persistent cookies - cookies that last for a long/specific time set by cookie creator and are stored on the client device
--> can be used for keeping users logged into accounts on websites; BUT also tracking
--> info transmitted to server every time client visits website cookie belongs to (or views resource connected to that website on another website eg. advertisement)

3. secure cookies - only sent over an encrypted connection (https) - made secure by adding 'Secure' flag in options - less likely to be exposed to eavesdropping cookie theft

4.HTTP-only cookies - cannot be accessed by client side APIs (eg. JS). This restriction helps mitigate cross-site scripting (XSS) attacks BUT still vulnerable to cross-site tracing (XST) and cross-site request forgery (CSRF) <has 'HttpOnly' flag> in options

5. Same-site cookies - cookies that are only sent in requests initiated from the same origin as the target domain. This restriction mitigates CSRF attacks by preventing the browser from sending the cookie along with cross-site requests. <has 'SameSite' flag> in options


Example code:
let cookieParser = require('cookie-parser')
app.use(cookieParser(<'secret'>)); 

optional secret string used to sign cookies to prevent tampering. If you don't want to sign cookies, you can use cookieParser without any arguments:

res.cookie('<cookieName>', '<cookieValue>', OPTIONAL<options>)
console.log(req.headers.cookie) --> to see all cookies sent by client
console.log(req.cookies) --> see parsed cookie i.e. in object format
if (req.cookies.<cookieName> && req.cookies.<cookieName> === '<cookieValue>')
{
	return -->do something
}
return res.send({msg: 'You need the correct cookie to access this resource./ you need to log in})
where options is an object eg. { signed: true, expires: new Date(Date.now() + 900000), httpOnly: true }

if cookie is signed & options{ signed: true }, you can use 
(req.signedCookies <cookieName>) 
to access the parsed cookies, otherwise use req.cookies

SESSIONS + USER AUTHENTICATION
User Authentication:
https://expressjs.com/en/resources/middleware/session.html
- sessions are created and implemented on express server; 
--> server sends cookie to client with session ID that gets saved in browser;  
--> can parse cookies and use session ID to look up session data on server;
--> subsequent client req will include session ID in cookie and server will parse cookie to JSON, verify and use session ID to look up session data  for that client on server
- session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.
*(cookie-parser middelware no longer needs to be used for this module to work as it directly reads/writes cookies on req/res. Using cookie-parser may result in issues if the secret is not the same between this module and cookie-parser.)
--> usually db is used to store session data (eg. MongoDB) but can also be stored in memory (not recommended for production) or in a file store (eg. session-file-store)
Example code: 
*(note: to store or access session data use req.session; also has methods that can be chained eg. req.session.destroy/regenereate/reloaid/save/load)

let session = require('express-session') //creates session middleware with <options>

app.use(session({
	name: 'sessionID',
	proxy: true,
	genid: (req) => {
		returngenuuid
		//function to call to generate session ID
		//Provide a function that returns a string that will be used as a session ID. The function is given req as the first argument if you want to use some value attached to req when generating the ID.
		//The default value is a function which uses the uid-safe library to generate IDs.
	},
	secret: 'keyboard cat', //used to sign the cookie
	saveUninitialized: false, //if client just visting and not doing anything on website, unnecessary to use memory to save session (default is true)
	resave: false, //if session is not modified, don't save, again to prevent unnecessary memory usage (default is true)
	cookie: { secure: true, maxAge: 60000 * 60, httpOnly: true }
}))

(note:check session store implementation in express docs)
req.sessionStore.get(req.session.id, (err, sessionData)=> {
	if (err) {
		return console.log(err);
		throw err;
	}
	console.log(sessionData);
})

example usage - purpose to modify session obj so only one sessionID is generated for the user by express (sent through cookie) and then used to look up session data and identify user during the session. server receives cookie, parses it and map session id from cookie with session data on server for that client.

app.post('/api/auth', (req, res)=>{
	const { username, password} = req.body;
	const fundUser = users.find(user => user.username === username);
	if(!findUser || findUser.password !== password){
		return res.status(401).send({msg: 'Wrong username or password'})
	}
	req.session.user = findUser;
	return res.status(200).send({msg: 'Logged in'})
})

app.get('/api/auth/status, (req, res)=>{
	reqq.sessionStore.get(req.session.id, (err, sessionData)=> {
		console.log(sessionData);
	})
	return req.session.user ? res.status(200).send(req.session.user): res.status(401).send({msg: 'Not logged in'})
})
 (note: connect.sid is the default name of the session ID cookie set by the express-session middleware in Express.js.

When a client makes a request to an Express.js server that uses express-session, the middleware will set a cookie named connect.sid in the client's browser with a unique session ID. This session ID is used to identify the client in subsequent requests.

The session ID is used to look up session data stored on the server. This data can include anything you want to persist across requests from the same client, such as user authentication status or user preferences.

You can customize the name of the session ID cookie by setting the name option in the express-session configuration)

------------------------------------------------
Passport.js Authentication middleware for Node/Express - https://www.passportjs.org/
https://www.passportjs.org/packages/ - has passport-<strategies> that can be used depending on need (eg. twitter, jwt, facebook etc)
-integrates very well with express, express-session
strategies/local-strategies.mjs

app.use(passport.initialize()) //initializes passport
app.use(passport.session()) //adds session support
(check stratgies/local-strategy.mjs)

passport needs to serialize the user/client into the session using 2 functions - serializeUser and deserializeUser
takes user obj and stores it in the session
https://stackoverflow.com/questions/27637609/understanding-passport-serialize-deserialize
passport.serializeUser(function(user, done) {
    done(null, user.id);
});              │
                 │ 
                 │
                 └─────────────────┬──→ saved to session
                                   │    req.session.passport.user = {id: '..'}
                                   │
                                   ↓           
passport.deserializeUser(function(id, done) {
                   ┌───────────────┘
                   │
                   ↓ 
    User.findById(id, function(err, user) {
        done(err, user);
    });            └──────────────→ user object attaches to the request as req.user   
});
--> so the deserializeUser function uses the id from the session and looks up the user in the database and attaches it to the request as req.user so that you can use it in your request handlers.
------------------------------------------------
mongoose  
-schema = defines database collection structure.
After creating schema, you need to compile/create a model based on that schema.
Model is what is used to perform operations on data in the db
*note- db automatically generates _id

const schema = new mongoose.Schema({
	key: {structure of data},
})

const model = mongoose.model('collectionName', schema)
------------------------------------------------
sessionStore: 
allows data to persist session data in case of server restart/down
store session data in db or file store so expressSession can use it
(by default expressSession stores session data in memory)

use connect-mongo package to connect sessionStore to db/mongoose

import MongoStore from 'connect-mongo';
	//The MongoStore.create function is creating a new MongoDB store for sessions, with the MongoDB client 
	//obtained from the existing Mongoose connection.
app.use(session({
	store: MongoStore.create({client: mongoose.connection.getClient()}),
	secret: 'secret',
	resave: false,
	saveUninitialized: false,
	cookie:{maxAge: 1000 * 60 * 60 * 24}
	}))














------------------------------------------------




